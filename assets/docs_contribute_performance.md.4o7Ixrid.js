import{_ as a,c as s,a3 as i,o as t}from"./chunks/framework.CP16cIa8.js";const k=JSON.parse('{"title":"Performance","description":"","frontmatter":{"title":"Performance","outline":"deep"},"headers":[],"relativePath":"docs/contribute/performance.md","filePath":"docs/contribute/performance.md"}'),n={name:"docs/contribute/performance.md"};function l(o,e,r,p,h,c){return t(),s("div",null,e[0]||(e[0]=[i(`<h1 id="performance" tabindex="-1">Performance <a class="header-anchor" href="#performance" aria-label="Permalink to &quot;Performance&quot;">​</a></h1><ul><li>All performance issues (runtime and compilation speed) are considered as bugs in this project.</li><li>Follow guidance from the <a href="https://nnethercote.github.io/perf-book/introduction.html" target="_blank" rel="noreferrer">Rust performance book</a>.</li></ul><h2 id="compile-time" tabindex="-1">Compile Time <a class="header-anchor" href="#compile-time" aria-label="Permalink to &quot;Compile Time&quot;">​</a></h2><p>While Rust has gained a reputation for its comparatively slower compilation speed, we have dedicated significant effort to fine-tune the Rust compilation speed.</p><p>Our goal is to minimize any impact on development workflow, ensuring that Oxc based tools remain fast to compile.</p><p>Our <a href="https://github.com/oxc-project/oxc/actions/workflows/ci.yml?query=branch%3Amain" target="_blank" rel="noreferrer">CI runs</a> complete in 3 minutes, any regressions need to be fixed.</p><h2 id="profile" tabindex="-1">Profile <a class="header-anchor" href="#profile" aria-label="Permalink to &quot;Profile&quot;">​</a></h2><h3 id="heap-allocation" tabindex="-1">Heap Allocation <a class="header-anchor" href="#heap-allocation" aria-label="Permalink to &quot;Heap Allocation&quot;">​</a></h3><p>Try <a href="https://docs.rs/dhat/latest/dhat" target="_blank" rel="noreferrer">dhat</a>.</p><h3 id="cpu-samply" tabindex="-1">CPU - Samply <a class="header-anchor" href="#cpu-samply" aria-label="Permalink to &quot;CPU - Samply&quot;">​</a></h3><p><a href="https://github.com/mstange/samply" target="_blank" rel="noreferrer">Samply</a> is a command line CPU profiler which uses the Firefox profiler as its UI. Works on macOS and Linux.</p><h3 id="cpu-mac-xcode-instruments" tabindex="-1">CPU - Mac Xcode Instruments <a class="header-anchor" href="#cpu-mac-xcode-instruments" aria-label="Permalink to &quot;CPU - Mac Xcode Instruments&quot;">​</a></h3><p><a href="https://github.com/cmyr/cargo-instruments" target="_blank" rel="noreferrer"><code>cargo instruments</code></a> is the tool of choice to bridge Mac Xcode instruments.</p><p>The following instruction replicates the procedure of <code>cargo instruments</code>.</p><p>First, install Xcode Instruments command-line tools:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">xcode-select</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --install</span></span></code></pre></div><p>And then change the build profile to show debug symbols:</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">profile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">release</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">debug = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # enable debug symbols</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">strip = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # do not strip symbols</span></span></code></pre></div><p>Build the binary with <code>--release</code>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --release</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --bin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> oxlint</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --features</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> allocator</span></span></code></pre></div><p>Once the project is built, the binary is located at <code>./target/release/oxlint</code>.</p><p>Under the hood, <code>cargo instruments</code> invokes the <code>xcrun xctrace</code> command, which is equivalent to</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">xcrun</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xctrace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> record</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --template</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Time Profile&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --output</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --launch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/oxc/target/release/oxlint</span></span></code></pre></div><p>Running the command above produces the following output</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Starting recording with the Time Profiler template. Launching process: oxlint.</span></span>
<span class="line"><span>Ctrl-C to stop the recording</span></span>
<span class="line"><span>Target app exited, ending recording...</span></span>
<span class="line"><span>Recording completed. Saving output file...</span></span>
<span class="line"><span>Output file saved as: Launch_oxlint_2023-09-03_4.41.45 PM_EB179B85.trace</span></span></code></pre></div><p>Open the trace file <code>open Launch_oxlint_2023-09-03_4.41.45\\ PM_EB179B85.trace</code>.</p><p>To see a top down trace:</p><ol><li>On the top panel, click CPUs</li><li>On the left input box, click <code>x</code> then select <code>Time Profiler</code></li><li>At the bottom panel, click &quot;Call Tree&quot;, turn on &quot;Invert Call Tree&quot; and turn off separate by thread.</li></ol><p>For memory and disk operations, use <code>--template &#39;Allocations&#39;</code> and <code>--template &#39;File Activity&#39;</code>.</p>`,29)]))}const u=a(n,[["render",l]]);export{k as __pageData,u as default};

import{_ as n,c as p,j as e,a as s,I as t,w as o,a4 as l,E as i,o as h}from"./chunks/framework.D6UG3LSr.js";const E=JSON.parse('{"title":"typescript/prefer-ts-expect-error","description":"","frontmatter":{},"headers":[],"relativePath":"docs/guide/usage/linter/rules/typescript/prefer-ts-expect-error.md","filePath":"docs/guide/usage/linter/rules/typescript/prefer-ts-expect-error.md"}'),c={name:"docs/guide/usage/linter/rules/typescript/prefer-ts-expect-error.md"},d={id:"typescript-prefer-ts-expect-error",tabindex:"-1"},k=e("a",{class:"header-anchor",href:"#typescript-prefer-ts-expect-error","aria-label":'Permalink to "typescript/prefer-ts-expect-error <Badge type="info" text="Pedantic" />"'},"‚Äã",-1),g={class:"rule-meta"},y=e("span",{class:"emoji"},"üõ†Ô∏è",-1),u=l(`<h3 id="what-it-does" tabindex="-1">What it does <a class="header-anchor" href="#what-it-does" aria-label="Permalink to &quot;What it does&quot;">‚Äã</a></h3><p>Enforce using @ts-expect-error over @ts-ignore.</p><h3 id="why-is-this-bad" tabindex="-1">Why is this bad? <a class="header-anchor" href="#why-is-this-bad" aria-label="Permalink to &quot;Why is this bad?&quot;">‚Äã</a></h3><p>TypeScript allows you to suppress all errors on a line by placing a comment starting with @ts-ignore or @ts-expect-error immediately before the erroring line. The two directives work the same, except @ts-expect-error causes a type error if placed before a line that&#39;s not erroring in the first place.</p><p>This means it&#39;s easy for @ts-ignores to be forgotten about, and remain in code even after the error they were suppressing is fixed. This is dangerous, as if a new error arises on that line it&#39;ll be suppressed by the forgotten about @ts-ignore, and so be missed.</p><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">‚Äã</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// @ts-ignore</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Explaining comment</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * @ts-ignore */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> multiLine</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div>`,7);function f(_,m,x,b,A,F){const a=i("Badge"),r=i("Alert");return h(),p("div",null,[e("h1",d,[s("typescript/prefer-ts-expect-error "),t(a,{type:"info",text:"Pedantic"}),s(),k]),e("div",g,[t(r,{class:"fix",type:"info"},{default:o(()=>[y,s(" An auto-fix is available for this rule. ")]),_:1})]),u])}const C=n(c,[["render",f]]);export{E as __pageData,C as default};

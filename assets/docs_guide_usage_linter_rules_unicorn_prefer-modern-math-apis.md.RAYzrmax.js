import{_ as h,c as r,j as s,a,I as i,w as l,a4 as p,E as e,o}from"./chunks/framework.D6UG3LSr.js";const C=JSON.parse('{"title":"unicorn/prefer-modern-math-apis","description":"","frontmatter":{},"headers":[],"relativePath":"docs/guide/usage/linter/rules/unicorn/prefer-modern-math-apis.md","filePath":"docs/guide/usage/linter/rules/unicorn/prefer-modern-math-apis.md"}'),d={name:"docs/guide/usage/linter/rules/unicorn/prefer-modern-math-apis.md"},c={id:"unicorn-prefer-modern-math-apis",tabindex:"-1"},k=s("a",{class:"header-anchor",href:"#unicorn-prefer-modern-math-apis","aria-label":'Permalink to "unicorn/prefer-modern-math-apis <Badge type="info" text="Restriction" />"'},"â€‹",-1),E={class:"rule-meta"},g=s("span",{class:"emoji"},"ðŸš§",-1),m=p(`<h3 id="what-it-does" tabindex="-1">What it does <a class="header-anchor" href="#what-it-does" aria-label="Permalink to &quot;What it does&quot;">â€‹</a></h3><p>Checks for usage of legacy patterns for mathematical operations.</p><h3 id="why-is-this-bad" tabindex="-1">Why is this bad? <a class="header-anchor" href="#why-is-this-bad" aria-label="Permalink to &quot;Why is this bad?&quot;">â€‹</a></h3><p>Modern JavaScript provides more concise and readable alternatives to legacy patterns.</p><p>Currently, the following cases are checked:</p><ul><li>Prefer <code>Math.log10(x)</code> over alternatives</li><li>Prefer <code>Math.hypot(â€¦)</code> over alternatives</li></ul><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">â€‹</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Bad</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LOG10E</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sqrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Good</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hypot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, b);</span></span></code></pre></div>`,8);function u(y,_,f,b,x,v){const t=e("Badge"),n=e("Alert");return o(),r("div",null,[s("h1",c,[a("unicorn/prefer-modern-math-apis "),i(t,{type:"info",text:"Restriction"}),a(),k]),s("div",E,[i(n,{class:"fix",type:"info"},{default:l(()=>[g,a(" An auto-fix is still under development. ")]),_:1})]),m])}const F=h(d,[["render",u]]);export{C as __pageData,F as default};

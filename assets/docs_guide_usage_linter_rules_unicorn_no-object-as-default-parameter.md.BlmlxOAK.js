import{_ as i,c as t,j as s,a,I as n,a4 as o,o as l,E as r}from"./chunks/framework.D6UG3LSr.js";const y=JSON.parse('{"title":"unicorn/no-object-as-default-parameter","description":"","frontmatter":{},"headers":[],"relativePath":"docs/guide/usage/linter/rules/unicorn/no-object-as-default-parameter.md","filePath":"docs/guide/usage/linter/rules/unicorn/no-object-as-default-parameter.md"}'),h={name:"docs/guide/usage/linter/rules/unicorn/no-object-as-default-parameter.md"},d={id:"unicorn-no-object-as-default-parameter",tabindex:"-1"},p=s("a",{class:"header-anchor",href:"#unicorn-no-object-as-default-parameter","aria-label":'Permalink to "unicorn/no-object-as-default-parameter <Badge type="info" text="Pedantic" />"'},"​",-1),c=o(`<div class="rule-meta"></div><h3 id="what-it-does" tabindex="-1">What it does <a class="header-anchor" href="#what-it-does" aria-label="Permalink to &quot;What it does&quot;">​</a></h3><p>Disallow the use of an object literal as a default value for a parameter.</p><h3 id="why-is-this-bad" tabindex="-1">Why is this bad? <a class="header-anchor" href="#why-is-this-bad" aria-label="Permalink to &quot;Why is this bad?&quot;">​</a></h3><p>Default parameters should not be passed to a function through an object literal. The <code>foo = {a: false}</code> parameter works fine if only used with one option. As soon as additional options are added, you risk replacing the whole <code>foo = {a: false, b: true}</code> object when passing only one option: <code>{a: true}</code>. For this reason, object destructuring should be used instead.</p><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Bad</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Good</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}) {}</span></span></code></pre></div>`,7);function k(u,f,g,m,b,E){const e=r("Badge");return l(),t("div",null,[s("h1",d,[a("unicorn/no-object-as-default-parameter "),n(e,{type:"info",text:"Pedantic"}),a(),p]),c])}const F=i(h,[["render",k]]);export{y as __pageData,F as default};

import{_ as o,c as l,j as s,a,I as e,w as h,a4 as c,E as i,o as d}from"./chunks/framework.D6UG3LSr.js";const B=JSON.parse('{"title":"unicorn/no-console-spaces","description":"","frontmatter":{},"headers":[],"relativePath":"docs/guide/usage/linter/rules/unicorn/no-console-spaces.md","filePath":"docs/guide/usage/linter/rules/unicorn/no-console-spaces.md"}'),p={name:"docs/guide/usage/linter/rules/unicorn/no-console-spaces.md"},r={id:"unicorn-no-console-spaces",tabindex:"-1"},k=s("a",{class:"header-anchor",href:"#unicorn-no-console-spaces","aria-label":'Permalink to "unicorn/no-console-spaces <Badge type="info" text="Style" />"'},"‚Äã",-1),u={class:"rule-meta"},g=s("span",{class:"emoji"},"üõ†Ô∏è",-1),E=c(`<h3 id="what-it-does" tabindex="-1">What it does <a class="header-anchor" href="#what-it-does" aria-label="Permalink to &quot;What it does&quot;">‚Äã</a></h3><p>Disallows leading/trailing space inside <code>console.log()</code> and similar methods.</p><h3 id="why-is-this-bad" tabindex="-1">Why is this bad? <a class="header-anchor" href="#why-is-this-bad" aria-label="Permalink to &quot;Why is this bad?&quot;">‚Äã</a></h3><p>The <code>console.log()</code> method and similar methods join the parameters with a space so adding a leading/trailing space to a parameter, results in two spaces being added.</p><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">‚Äã</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Bad</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abc &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;def&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Good</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;def&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div>`,6);function _(m,y,b,f,x,F){const t=i("Badge"),n=i("Alert");return d(),l("div",null,[s("h1",r,[a("unicorn/no-console-spaces "),e(t,{type:"info",text:"Style"}),a(),k]),s("div",u,[e(n,{class:"fix",type:"info"},{default:h(()=>[g,a(" An auto-fix is available for this rule. ")]),_:1})]),E])}const C=o(p,[["render",_]]);export{B as __pageData,C as default};

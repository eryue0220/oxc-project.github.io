import{_ as o,c as r,j as e,a as t,I as s,w as d,a4 as l,E as a,o as c}from"./chunks/framework.D6UG3LSr.js";const A=JSON.parse('{"title":"unicorn/prefer-dom-node-text-content","description":"","frontmatter":{},"headers":[],"relativePath":"docs/guide/usage/linter/rules/unicorn/prefer-dom-node-text-content.md","filePath":"docs/guide/usage/linter/rules/unicorn/prefer-dom-node-text-content.md"}'),h={name:"docs/guide/usage/linter/rules/unicorn/prefer-dom-node-text-content.md"},p={id:"unicorn-prefer-dom-node-text-content",tabindex:"-1"},u=e("a",{class:"header-anchor",href:"#unicorn-prefer-dom-node-text-content","aria-label":'Permalink to "unicorn/prefer-dom-node-text-content <Badge type="info" text="Style" />"'},"‚Äã",-1),f={class:"rule-meta"},m=e("span",{class:"emoji"},"üõ†Ô∏è",-1),x=l(`<h3 id="what-it-does" tabindex="-1">What it does <a class="header-anchor" href="#what-it-does" aria-label="Permalink to &quot;What it does&quot;">‚Äã</a></h3><p>Enforces the use of <code>.textContent</code> over <code>.innerText</code> for DOM nodes.</p><h3 id="why-is-this-bad" tabindex="-1">Why is this bad? <a class="header-anchor" href="#why-is-this-bad" aria-label="Permalink to &quot;Why is this bad?&quot;">‚Äã</a></h3><p>There are some disadvantages of using .innerText.</p><ul><li><code>.innerText</code> is much more performance-heavy as it requires layout information to return the result.</li><li><code>.innerText</code> is defined only for HTMLElement objects, while <code>.textContent</code> is defined for all Node objects.</li><li><code>.innerText</code> is not standard, for example, it is not present in Firefox.</li></ul><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">‚Äã</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Bad</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo.innerText;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Good</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo.textContent;</span></span></code></pre></div>`,7);function k(_,g,y,b,v,T){const n=a("Badge"),i=a("Alert");return c(),r("div",null,[e("h1",p,[t("unicorn/prefer-dom-node-text-content "),s(n,{type:"info",text:"Style"}),t(),u]),e("div",f,[s(i,{class:"fix",type:"info"},{default:d(()=>[m,t(" An auto-fix is available for this rule for some violations. ")]),_:1})]),x])}const C=o(h,[["render",k]]);export{A as __pageData,C as default};

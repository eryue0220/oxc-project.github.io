import{_ as r,c as h,j as s,a,I as e,w as p,a4 as l,E as i,o}from"./chunks/framework.D6UG3LSr.js";const C=JSON.parse('{"title":"unicorn/prefer-spread","description":"","frontmatter":{},"headers":[],"relativePath":"docs/guide/usage/linter/rules/unicorn/prefer-spread.md","filePath":"docs/guide/usage/linter/rules/unicorn/prefer-spread.md"}'),d={name:"docs/guide/usage/linter/rules/unicorn/prefer-spread.md"},c={id:"unicorn-prefer-spread",tabindex:"-1"},k=s("a",{class:"header-anchor",href:"#unicorn-prefer-spread","aria-label":'Permalink to "unicorn/prefer-spread <Badge type="info" text="Style" />"'},"​",-1),g={class:"rule-meta"},_=s("span",{class:"emoji"},"🛠️",-1),u=l(`<h3 id="what-it-does" tabindex="-1">What it does <a class="header-anchor" href="#what-it-does" aria-label="Permalink to &quot;What it does&quot;">​</a></h3><p>Enforces the use of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax" target="_blank" rel="noreferrer">the spread operator (<code>...</code>)</a> over outdated patterns.</p><h3 id="why-is-this-bad" tabindex="-1">Why is this bad? <a class="header-anchor" href="#why-is-this-bad" aria-label="Permalink to &quot;Why is this bad?&quot;">​</a></h3><p>Using the spread operator is more concise and readable.</p><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// bad</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(set);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// good</span></span></code></pre></div>`,6);function f(y,E,m,b,x,F){const t=i("Badge"),n=i("Alert");return o(),h("div",null,[s("h1",c,[a("unicorn/prefer-spread "),e(t,{type:"info",text:"Style"}),a(),k]),s("div",g,[e(n,{class:"fix",type:"info"},{default:p(()=>[_,a(" An auto-fix is available for this rule for some violations. ")]),_:1})]),u])}const v=r(d,[["render",f]]);export{C as __pageData,v as default};

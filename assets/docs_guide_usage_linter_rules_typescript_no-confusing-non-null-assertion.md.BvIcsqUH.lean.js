import{_ as l,c as r,j as a,a as e,G as n,w as p,a2 as h,B as i,o as d}from"./chunks/framework.8qdJL5ht.js";const _=JSON.parse('{"title":"typescript/no-confusing-non-null-assertion","description":"","frontmatter":{},"headers":[],"relativePath":"docs/guide/usage/linter/rules/typescript/no-confusing-non-null-assertion.md","filePath":"docs/guide/usage/linter/rules/typescript/no-confusing-non-null-assertion.md"}'),c={name:"docs/guide/usage/linter/rules/typescript/no-confusing-non-null-assertion.md"},u={id:"typescript-no-confusing-non-null-assertion",tabindex:"-1"},k={class:"rule-meta"};function g(f,s,y,m,b,E){const t=i("Badge"),o=i("Alert");return d(),r("div",null,[a("h1",u,[s[0]||(s[0]=e("typescript/no-confusing-non-null-assertion ")),n(t,{type:"info",text:"Suspicious"}),s[1]||(s[1]=e()),s[2]||(s[2]=a("a",{class:"header-anchor",href:"#typescript-no-confusing-non-null-assertion","aria-label":'Permalink to "typescript/no-confusing-non-null-assertion <Badge type="info" text="Suspicious" />"'},"â€‹",-1))]),a("div",k,[n(o,{class:"fix",type:"info"},{default:p(()=>s[3]||(s[3]=[a("span",{class:"emoji"},"ðŸš§",-1),e(" An auto-fix is still under development. ")])),_:1})]),s[4]||(s[4]=h('<h3 id="what-it-does" tabindex="-1">What it does <a class="header-anchor" href="#what-it-does" aria-label="Permalink to &quot;What it does&quot;">â€‹</a></h3><p>Disallow non-null assertion in locations that may be confusing.</p><h3 id="why-is-this-bad" tabindex="-1">Why is this bad? <a class="header-anchor" href="#why-is-this-bad" aria-label="Permalink to &quot;Why is this bad?&quot;">â€‹</a></h3><p>Using a non-null assertion (!) next to an assign or equals check (= or == or ===) creates code that is confusing as it looks similar to a not equals check (!= !==).</p><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">â€‹</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// a non-null assertions(`!`) and an equals test(`==`)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// not equals test(`!==`)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// a non-null assertions(`!`) and an triple equals test(`===`)</span></span></code></pre></div><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to &quot;References&quot;">â€‹</a></h2><ul><li><a href="https://github.com/oxc-project/oxc/blob/main/crates/oxc_linter/src/rules/typescript/no_confusing_non_null_assertion.rs" target="_blank" rel="noreferrer">Rule Source</a></li></ul>',8))])}const A=l(c,[["render",g]]);export{_ as __pageData,A as default};

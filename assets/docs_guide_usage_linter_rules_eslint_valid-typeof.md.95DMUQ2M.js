import{_ as o,c as p,j as s,a,I as i,w as t,a4 as h,E as n,o as r}from"./chunks/framework.D6UG3LSr.js";const F=JSON.parse('{"title":"eslint/valid-typeof","description":"","frontmatter":{},"headers":[],"relativePath":"docs/guide/usage/linter/rules/eslint/valid-typeof.md","filePath":"docs/guide/usage/linter/rules/eslint/valid-typeof.md"}'),d={name:"docs/guide/usage/linter/rules/eslint/valid-typeof.md"},c={id:"eslint-valid-typeof",tabindex:"-1"},k=s("a",{class:"header-anchor",href:"#eslint-valid-typeof","aria-label":'Permalink to "eslint/valid-typeof <Badge type="info" text="Correctness" />"'},"‚Äã",-1),y={class:"rule-meta"},g=s("span",{class:"emoji"},"‚úÖ",-1),f=s("span",{class:"emoji"},"üõ†Ô∏è",-1),u=h(`<h3 id="what-it-does" tabindex="-1">What it does <a class="header-anchor" href="#what-it-does" aria-label="Permalink to &quot;What it does&quot;">‚Äã</a></h3><p>Enforce comparing <code>typeof</code> expressions against valid strings</p><h3 id="why-is-this-bad" tabindex="-1">Why is this bad? <a class="header-anchor" href="#why-is-this-bad" aria-label="Permalink to &quot;Why is this bad?&quot;">‚Äã</a></h3><p>It is usually a typing mistake to compare the result of a <code>typeof</code> operator to other string literals.</p><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">‚Äã</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// requireStringLiterals: false</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// incorrect:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;strnig&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// correct:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;string&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> baz;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// requireStringLiterals: true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// incorrect:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> baz;</span></span></code></pre></div>`,6);function _(E,m,A,b,v,D){const l=n("Badge"),e=n("Alert");return r(),p("div",null,[s("h1",c,[a("eslint/valid-typeof "),i(l,{type:"info",text:"Correctness"}),a(),k]),s("div",y,[i(e,{class:"default-on",type:"success"},{default:t(()=>[g,a(" This rule is turned on by default. ")]),_:1}),i(e,{class:"fix",type:"info"},{default:t(()=>[f,a(" An auto-fix is available for this rule for some violations. ")]),_:1})]),u])}const q=o(d,[["render",_]]);export{F as __pageData,q as default};

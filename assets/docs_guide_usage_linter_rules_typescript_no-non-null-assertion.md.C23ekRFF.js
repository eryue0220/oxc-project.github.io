import{_ as a,c as n,j as e,a as s,I as i,a4 as o,o as l,E as r}from"./chunks/framework.D6UG3LSr.js";const f=JSON.parse('{"title":"typescript/no-non-null-assertion","description":"","frontmatter":{},"headers":[],"relativePath":"docs/guide/usage/linter/rules/typescript/no-non-null-assertion.md","filePath":"docs/guide/usage/linter/rules/typescript/no-non-null-assertion.md"}'),p={name:"docs/guide/usage/linter/rules/typescript/no-non-null-assertion.md"},h={id:"typescript-no-non-null-assertion",tabindex:"-1"},d=e("a",{class:"header-anchor",href:"#typescript-no-non-null-assertion","aria-label":'Permalink to "typescript/no-non-null-assertion <Badge type="info" text="Restriction" />"'},"​",-1),c=o(`<div class="rule-meta"></div><h3 id="what-it-does" tabindex="-1">What it does <a class="header-anchor" href="#what-it-does" aria-label="Permalink to &quot;What it does&quot;">​</a></h3><p>Disallow non-null assertions using the ! postfix operator.</p><h3 id="why-is-this-bad" tabindex="-1">Why is this bad? <a class="header-anchor" href="#why-is-this-bad" aria-label="Permalink to &quot;Why is this bad?&quot;">​</a></h3><p>TypeScript&#39;s ! non-null assertion operator asserts to the type system that an expression is non-nullable, as in not null or undefined. Using assertions to tell the type system new information is often a sign that code is not fully type-safe. It&#39;s generally better to structure program logic so that TypeScript understands when values may be nullable.</p><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.y;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x.y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div>`,7);function u(y,k,g,_,E,m){const t=r("Badge");return l(),n("div",null,[e("h1",h,[s("typescript/no-non-null-assertion "),i(t,{type:"info",text:"Restriction"}),s(),d]),c])}const x=a(p,[["render",u]]);export{f as __pageData,x as default};

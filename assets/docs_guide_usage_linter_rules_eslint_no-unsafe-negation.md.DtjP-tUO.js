import{_ as l,c as h,j as e,a,I as s,w as i,a4 as r,E as n,o as d}from"./chunks/framework.D6UG3LSr.js";const q=JSON.parse('{"title":"eslint/no-unsafe-negation","description":"","frontmatter":{},"headers":[],"relativePath":"docs/guide/usage/linter/rules/eslint/no-unsafe-negation.md","filePath":"docs/guide/usage/linter/rules/eslint/no-unsafe-negation.md"}'),c={name:"docs/guide/usage/linter/rules/eslint/no-unsafe-negation.md"},p={id:"eslint-no-unsafe-negation",tabindex:"-1"},u=e("a",{class:"header-anchor",href:"#eslint-no-unsafe-negation","aria-label":'Permalink to "eslint/no-unsafe-negation <Badge type="info" text="Correctness" />"'},"​",-1),k={class:"rule-meta"},_=e("span",{class:"emoji"},"✅",-1),g=e("span",{class:"emoji"},"🛠️",-1),f=r(`<h3 id="what-it-does" tabindex="-1">What it does <a class="header-anchor" href="#what-it-does" aria-label="Permalink to &quot;What it does&quot;">​</a></h3><p>Disallow negating the left operand of relational operators</p><h3 id="why-is-this-bad" tabindex="-1">Why is this bad? <a class="header-anchor" href="#why-is-this-bad" aria-label="Permalink to &quot;Why is this bad?&quot;">​</a></h3><p>Just as developers might type -a + b when they mean -(a + b) for the negative of a sum, they might type !key in object by mistake when they almost certainly mean !(key in object) to test that a key is not in an object. !obj instanceof Ctor is similar.</p><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">key) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> object) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //operator precedence makes it equivalent to (!key) in object</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //and type conversion makes it equivalent to (key ? &quot;false&quot; : &quot;true&quot;) in object</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,6);function m(y,b,E,x,v,A){const o=n("Badge"),t=n("Alert");return d(),h("div",null,[e("h1",p,[a("eslint/no-unsafe-negation "),s(o,{type:"info",text:"Correctness"}),a(),u]),e("div",k,[s(t,{class:"default-on",type:"success"},{default:i(()=>[_,a(" This rule is turned on by default. ")]),_:1}),s(t,{class:"fix",type:"info"},{default:i(()=>[g,a(" An auto-fix is available for this rule. ")]),_:1})]),f])}const D=l(c,[["render",m]]);export{q as __pageData,D as default};

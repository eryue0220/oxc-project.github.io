import{_ as t,c as a,a2 as r,o}from"./chunks/framework.Cm5JpC29.js";const p=JSON.parse('{"title":"AST Tools","description":"","frontmatter":{"title":"AST Tools","outline":"deep"},"headers":[],"relativePath":"docs/learn/architecture/ast-tools.md","filePath":"docs/learn/architecture/ast-tools.md"}'),s={name:"docs/learn/architecture/ast-tools.md"};function i(l,e,c,n,d,h){return o(),a("div",null,e[0]||(e[0]=[r('<h1 id="ast-tools" tabindex="-1">AST Tools <a class="header-anchor" href="#ast-tools" aria-label="Permalink to &quot;AST Tools&quot;">​</a></h1><p>The <a href="https://github.com/oxc-project/oxc/tree/main/tasks/ast_tools" target="_blank" rel="noreferrer">AST Tools</a> task serves as our secret weapon for managing all generated files. These tools include the AST builder, visitors, traits like <code>ContentEq</code> and <code>ContentHash</code>, and TypeScript types - all of which are machine-generated.</p><p>For instance, the following files are automatically generated:</p><ul><li><code>crates/oxc_ast/src/generated/ast_builder.rs</code></li><li><code>crates/oxc_ast/src/generated/visit.rs</code></li><li><code>crates/oxc_ast/src/generated/visit_mut.rs</code></li><li><code>crates/oxc_ast/src/generated/derive_content_eq.rs</code></li><li><code>crates/oxc_ast/src/generated/derive_content_hash.rs</code></li><li><code>npm/oxc-types/src/generated/types.d.ts</code></li></ul><h2 id="background" tabindex="-1">Background <a class="header-anchor" href="#background" aria-label="Permalink to &quot;Background&quot;">​</a></h2><p>Rust&#39;s compile time is notoriously slow, and using procedural macros to generate this much code worsens the issue.</p><p>Requiring users to wait for code generation to complete at build time would significantly hinder the development experience for downstream projects.</p><p>Both cold and incremental build times <a href="https://github.com/swc-project/swc/issues/7071" target="_blank" rel="noreferrer">can regress drastically</a>.</p><h2 id="the-rfc" tabindex="-1">The RFC <a class="header-anchor" href="#the-rfc" aria-label="Permalink to &quot;The RFC&quot;">​</a></h2><p>The team discussed the topic in <a href="https://github.com/oxc-project/oxc/issues/4134" target="_blank" rel="noreferrer">RFC: codegen AST related codes</a> and agreed on the following requirements and user story:</p><h3 id="requirements" tabindex="-1">Requirements <a class="header-anchor" href="#requirements" aria-label="Permalink to &quot;Requirements&quot;">​</a></h3><ul><li>No build.rs published to the user.</li><li>All generated code are checked into git.</li><li>No nightly.</li><li>Rust code is source of truth, need to parse types marked <code>#[ast]</code>.</li><li>Avoid compile-time procedural macros as much as possible.</li></ul><h3 id="workflow" tabindex="-1">Workflow <a class="header-anchor" href="#workflow" aria-label="Permalink to &quot;Workflow&quot;">​</a></h3><ul><li>A user changes code in repo.</li><li>A watch change picks it up.</li><li>Parse all types marked <code>#[ast]</code>.</li><li>Record details of all AST types in a schema.</li><li>Generate code from schema and save to files.</li></ul><h2 id="infrastructure" tabindex="-1">Infrastructure <a class="header-anchor" href="#infrastructure" aria-label="Permalink to &quot;Infrastructure&quot;">​</a></h2><p>More details to follow.</p>',16)]))}const m=t(s,[["render",i]]);export{p as __pageData,m as default};

import{_ as l,c as h,j as s,a as e,I as a,w as r,a4 as o,E as i,o as p}from"./chunks/framework.D6UG3LSr.js";const B=JSON.parse('{"title":"eslint/no-this-before-super","description":"","frontmatter":{},"headers":[],"relativePath":"docs/guide/usage/linter/rules/eslint/no-this-before-super.md","filePath":"docs/guide/usage/linter/rules/eslint/no-this-before-super.md"}'),d={name:"docs/guide/usage/linter/rules/eslint/no-this-before-super.md"},c={id:"eslint-no-this-before-super",tabindex:"-1"},k=s("a",{class:"header-anchor",href:"#eslint-no-this-before-super","aria-label":'Permalink to "eslint/no-this-before-super <Badge type="info" text="Correctness" />"'},"​",-1),u={class:"rule-meta"},_=s("span",{class:"emoji"},"✅",-1),g=o(`<h3 id="what-it-does" tabindex="-1">What it does <a class="header-anchor" href="#what-it-does" aria-label="Permalink to &quot;What it does&quot;">​</a></h3><p>Requires calling <code>super()</code> before using <code>this</code> or <code>super</code>.</p><h3 id="why-is-this-bad" tabindex="-1">Why is this bad? <a class="header-anchor" href="#why-is-this-bad" aria-label="Permalink to &quot;Why is this bad?&quot;">​</a></h3><p>Getters should always return a value. If they don&#39;t, it&#39;s probably a mistake.</p><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> A1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // super() needs to be called first</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,6);function E(b,y,f,m,x,C){const t=i("Badge"),n=i("Alert");return p(),h("div",null,[s("h1",c,[e("eslint/no-this-before-super "),a(t,{type:"info",text:"Correctness"}),e(),k]),s("div",u,[a(n,{class:"default-on",type:"success"},{default:r(()=>[_,e(" This rule is turned on by default. ")]),_:1})]),g])}const v=l(d,[["render",E]]);export{B as __pageData,v as default};

import{_ as l,c as h,j as e,a as t,G as a,w as r,a3 as d,B as n,o as p}from"./chunks/framework.CP16cIa8.js";const x=JSON.parse('{"title":"unicorn/prefer-string-starts-ends-with","description":"","frontmatter":{},"headers":[],"relativePath":"docs/guide/usage/linter/rules/unicorn/prefer-string-starts-ends-with.md","filePath":"docs/guide/usage/linter/rules/unicorn/prefer-string-starts-ends-with.md"}'),c={name:"docs/guide/usage/linter/rules/unicorn/prefer-string-starts-ends-with.md"},k={id:"unicorn-prefer-string-starts-ends-with",tabindex:"-1"},g={class:"rule-meta"};function u(f,s,b,E,m,y){const o=n("Badge"),i=n("Alert");return p(),h("div",null,[e("h1",k,[s[0]||(s[0]=t("unicorn/prefer-string-starts-ends-with ")),a(o,{type:"info",text:"Correctness"}),s[1]||(s[1]=t()),s[2]||(s[2]=e("a",{class:"header-anchor",href:"#unicorn-prefer-string-starts-ends-with","aria-label":'Permalink to "unicorn/prefer-string-starts-ends-with <Badge type="info" text="Correctness" />"'},"‚Äã",-1))]),e("div",g,[a(i,{class:"default-on",type:"success"},{default:r(()=>s[3]||(s[3]=[e("span",{class:"emoji"},"‚úÖ",-1),t(" This rule is turned on by default. ")])),_:1}),a(i,{class:"fix",type:"info"},{default:r(()=>s[4]||(s[4]=[e("span",{class:"emoji"},"üõ†Ô∏è",-1),t(" An auto-fix is available for this rule. ")])),_:1})]),s[5]||(s[5]=d(`<h3 id="what-it-does" tabindex="-1">What it does <a class="header-anchor" href="#what-it-does" aria-label="Permalink to &quot;What it does&quot;">‚Äã</a></h3><p>Prefer <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith" target="_blank" rel="noreferrer"><code>String#startsWith()</code></a> and <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith" target="_blank" rel="noreferrer"><code>String#endsWith()</code></a> over using a regex with <code>/^foo/</code> or <code>/foo$/</code>.</p><h3 id="why-is-this-bad" tabindex="-1">Why is this bad? <a class="header-anchor" href="#why-is-this-bad" aria-label="Permalink to &quot;Why is this bad?&quot;">‚Äã</a></h3><p>Using <code>String#startsWith()</code> and <code>String#endsWith()</code> is more readable and performant as it does not need to parse a regex.</p><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">‚Äã</a></h3><p>Examples of <strong>incorrect</strong> code for this rule:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">abc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(foo);</span></span></code></pre></div><p>Examples of <strong>correct</strong> code for this rule:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">foo.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to &quot;References&quot;">‚Äã</a></h2><ul><li><a href="https://github.com/oxc-project/oxc/blob/main/crates/oxc_linter/src/rules/unicorn/prefer_string_starts_ends_with.rs" target="_blank" rel="noreferrer">Rule Source</a></li></ul>`,11))])}const v=l(c,[["render",u]]);export{x as __pageData,v as default};

import{_ as r,c as l,j as s,a as t,G as a,w as p,a2 as h,B as i,o as d}from"./chunks/framework.Cm5JpC29.js";const v=JSON.parse('{"title":"vitest/prefer-to-be-object","description":"","frontmatter":{},"headers":[],"relativePath":"docs/guide/usage/linter/rules/vitest/prefer-to-be-object.md","filePath":"docs/guide/usage/linter/rules/vitest/prefer-to-be-object.md"}'),c={name:"docs/guide/usage/linter/rules/vitest/prefer-to-be-object.md"},k={id:"vitest-prefer-to-be-object",tabindex:"-1"},b={class:"rule-meta"};function f(g,e,u,y,E,m){const o=i("Badge"),n=i("Alert");return d(),l("div",null,[s("h1",k,[e[0]||(e[0]=t("vitest/prefer-to-be-object ")),a(o,{type:"info",text:"Style"}),e[1]||(e[1]=t()),e[2]||(e[2]=s("a",{class:"header-anchor",href:"#vitest-prefer-to-be-object","aria-label":'Permalink to "vitest/prefer-to-be-object <Badge type="info" text="Style" />"'},"‚Äã",-1))]),s("div",b,[a(n,{class:"fix",type:"info"},{default:p(()=>e[3]||(e[3]=[s("span",{class:"emoji"},"üõ†Ô∏è",-1),t(" An auto-fix is available for this rule. ")])),_:1})]),e[4]||(e[4]=h(`<h3 id="what-it-does" tabindex="-1">What it does <a class="header-anchor" href="#what-it-does" aria-label="Permalink to &quot;What it does&quot;">‚Äã</a></h3><p>This rule enforces using <code>toBeObject()</code> to check if a value is of type <code>Object</code>.</p><h3 id="why-is-this-bad" tabindex="-1">Why is this bad? <a class="header-anchor" href="#why-is-this-bad" aria-label="Permalink to &quot;Why is this bad?&quot;">‚Äã</a></h3><p>Using other methods such as <code>toBeInstanceOf(Object)</code> or <code>instanceof Object</code> can be less clear and potentially misleading. Enforcing the use of <code>toBeObject()</code> provides more explicit and readable code, making your intentions clear and improving the overall maintainability and readability of your tests.</p><h3 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">‚Äã</a></h3><p>Examples of <strong>incorrect</strong> code for this rule:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">expectTypeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toBeInstanceOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Object);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">expectTypeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toBeTruthy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>Examples of <strong>correct</strong> code for this rule:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">expectTypeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toBeObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">expectTypeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toBeObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to &quot;References&quot;">‚Äã</a></h2><ul><li><a href="https://github.com/oxc-project/oxc/blob/36ebb3e7841818c238c44349d6cf859db4177d55/crates/oxc_linter/src/rules/vitest/prefer_to_be_object.rs" target="_blank" rel="noreferrer">Rule Source</a></li></ul>`,11))])}const j=r(c,[["render",f]]);export{v as __pageData,j as default};

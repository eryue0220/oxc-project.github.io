import{_ as r,c as d,j as a,a as s,G as t,w as n,a2 as h,B as o,o as p}from"./chunks/framework.Cm5JpC29.js";const v=JSON.parse('{"title":"eslint/no-unsafe-negation","description":"","frontmatter":{},"headers":[],"relativePath":"docs/guide/usage/linter/rules/eslint/no-unsafe-negation.md","filePath":"docs/guide/usage/linter/rules/eslint/no-unsafe-negation.md"}'),c={name:"docs/guide/usage/linter/rules/eslint/no-unsafe-negation.md"},u={id:"eslint-no-unsafe-negation",tabindex:"-1"},f={class:"rule-meta"};function k(g,e,b,m,y,x){const l=o("Badge"),i=o("Alert");return p(),d("div",null,[a("h1",u,[e[0]||(e[0]=s("eslint/no-unsafe-negation ")),t(l,{type:"info",text:"Correctness"}),e[1]||(e[1]=s()),e[2]||(e[2]=a("a",{class:"header-anchor",href:"#eslint-no-unsafe-negation","aria-label":'Permalink to "eslint/no-unsafe-negation <Badge type="info" text="Correctness" />"'},"‚Äã",-1))]),a("div",f,[t(i,{class:"default-on",type:"success"},{default:n(()=>e[3]||(e[3]=[a("span",{class:"emoji"},"‚úÖ",-1),s(" This rule is turned on by default. ")])),_:1}),t(i,{class:"fix",type:"info"},{default:n(()=>e[4]||(e[4]=[a("span",{class:"emoji"},"üõ†Ô∏è",-1),s(" An auto-fix is available for this rule. ")])),_:1})]),e[5]||(e[5]=h(`<h3 id="what-it-does" tabindex="-1">What it does <a class="header-anchor" href="#what-it-does" aria-label="Permalink to &quot;What it does&quot;">‚Äã</a></h3><p>Disallow negating the left operand of relational operators</p><h3 id="why-is-this-bad" tabindex="-1">Why is this bad? <a class="header-anchor" href="#why-is-this-bad" aria-label="Permalink to &quot;Why is this bad?&quot;">‚Äã</a></h3><p>Just as developers might type -a + b when they mean -(a + b) for the negative of a sum, they might type !key in object by mistake when they almost certainly mean !(key in object) to test that a key is not in an object. !obj instanceof Ctor is similar.</p><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">‚Äã</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">key) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> object) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //operator precedence makes it equivalent to (!key) in object</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //and type conversion makes it equivalent to (key ? &quot;false&quot; : &quot;true&quot;) in object</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to &quot;References&quot;">‚Äã</a></h2><ul><li><a href="https://github.com/oxc-project/oxc/blob/25ddb3519289dfe2a51e53b9b0c355d8ad950bbc/crates/oxc_linter/src/rules/eslint/no_unsafe_negation.rs" target="_blank" rel="noreferrer">Rule Source</a></li></ul>`,8))])}const q=r(c,[["render",k]]);export{v as __pageData,q as default};

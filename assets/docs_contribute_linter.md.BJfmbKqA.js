import{_ as e,c as s,o as a,a3 as i}from"./chunks/framework.Bg3dKMxI.js";const g=JSON.parse('{"title":"Linter","description":"","frontmatter":{"title":"Linter","outline":"deep"},"headers":[],"relativePath":"docs/contribute/linter.md","filePath":"docs/contribute/linter.md"}'),t={name:"docs/contribute/linter.md"},n=i(`<h1 id="linter" tabindex="-1">Linter <a class="header-anchor" href="#linter" aria-label="Permalink to &quot;Linter&quot;">​</a></h1><h2 id="development" tabindex="-1">Development <a class="header-anchor" href="#development" aria-label="Permalink to &quot;Development&quot;">​</a></h2><p>Create a <code>./test.ts</code> and then</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">just</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> watch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;run --bin oxlint -- test.ts&quot;</span></span></code></pre></div><p>Or test and filter against the rule:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">just</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> watch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;test -p oxc_linter -- rule-name&quot;</span></span></code></pre></div><h3 id="snapshot-testing" tabindex="-1">Snapshot Testing <a class="header-anchor" href="#snapshot-testing" aria-label="Permalink to &quot;Snapshot Testing&quot;">​</a></h3><p><a href="https://insta.rs/docs" target="_blank" rel="noreferrer"><code>cargo insta</code></a> is used for snapshot testing.</p><p>After running <code>cargo test -p oxc_linter</code> and the line <code>Tester::new(RULE::NAME, pass, fail).test_and_snapshot()</code> is called, a new <code>rule.snap.new</code> file will be generated.</p><p>Use <code>cargo insta accept</code> to accept all snapshot changes.</p><h2 id="rule-generation" tabindex="-1">Rule generation <a class="header-anchor" href="#rule-generation" aria-label="Permalink to &quot;Rule generation&quot;">​</a></h2><p>Create a new linter rule by providing the ESLint name</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">just</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new-rule</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> name</span></span></code></pre></div><p>Then add the rule to <code>crates/oxc_linter/src/rules.rs</code>:</p><ol><li>Add to <code>mod</code></li><li>Add to <code>oxc_macros::declare_all_lint_rules</code> at the bottom of the file</li></ol><p>For other plugins, there are also:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">just</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new-jest-rule</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> name</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">just</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new-ts-rule</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> name</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">just</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new-unicorn-rule</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> name</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">just</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new-react-rule</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> name</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">just</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new-jsx-a11y-rule</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> name</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">just</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new-oxc-rule</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> name</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">just</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new-deepscan-rule</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> name</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">just</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new-nextjs-rule</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> name</span></span></code></pre></div><h2 id="rule-category" tabindex="-1">Rule Category <a class="header-anchor" href="#rule-category" aria-label="Permalink to &quot;Rule Category&quot;">​</a></h2><ul><li>correctness - code that is outright wrong or useless</li><li>suspicious - code that is most likely wrong or useless</li><li>pedantic - lints which are rather strict or have occasional false positives</li><li>perf - code that can be written to run faster</li><li>style - code that should be written in a more idiomatic way</li><li>restriction - lints should be considered on a case-by-case basis before enabling.</li><li>nursery - new lints that are still under development</li></ul><h2 id="general-advice" tabindex="-1">General Advice <a class="header-anchor" href="#general-advice" aria-label="Permalink to &quot;General Advice&quot;">​</a></h2><h3 id="pin-point-the-error-message-to-the-shortest-code-span" tabindex="-1">Pin point the error message to the shortest code span <a class="header-anchor" href="#pin-point-the-error-message-to-the-shortest-code-span" aria-label="Permalink to &quot;Pin point the error message to the shortest code span&quot;">​</a></h3><p>We want the user to focus on the problematic code rather than deciphering the error message to identify which part of the code is erroneous.</p>`,22),l=[n];function r(h,o,p,d,c,k){return a(),s("div",null,l)}const F=e(t,[["render",r]]);export{g as __pageData,F as default};

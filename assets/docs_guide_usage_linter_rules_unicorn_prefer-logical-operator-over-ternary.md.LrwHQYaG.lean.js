import{_ as o,c as l,j as e,a as s,G as i,w as p,a3 as h,B as r,o as d}from"./chunks/framework.CP16cIa8.js";const x=JSON.parse('{"title":"unicorn/prefer-logical-operator-over-ternary","description":"","frontmatter":{},"headers":[],"relativePath":"docs/guide/usage/linter/rules/unicorn/prefer-logical-operator-over-ternary.md","filePath":"docs/guide/usage/linter/rules/unicorn/prefer-logical-operator-over-ternary.md"}'),c={name:"docs/guide/usage/linter/rules/unicorn/prefer-logical-operator-over-ternary.md"},g={id:"unicorn-prefer-logical-operator-over-ternary",tabindex:"-1"},k={class:"rule-meta"};function u(f,a,y,b,m,E){const t=r("Badge"),n=r("Alert");return d(),l("div",null,[e("h1",g,[a[0]||(a[0]=s("unicorn/prefer-logical-operator-over-ternary ")),i(t,{type:"info",text:"Style"}),a[1]||(a[1]=s()),a[2]||(a[2]=e("a",{class:"header-anchor",href:"#unicorn-prefer-logical-operator-over-ternary","aria-label":'Permalink to "unicorn/prefer-logical-operator-over-ternary <Badge type="info" text="Style" />"'},"â€‹",-1))]),e("div",k,[i(n,{class:"fix",type:"info"},{default:p(()=>a[3]||(a[3]=[e("span",{class:"emoji"},"ðŸš§",-1),s(" An auto-fix is still under development. ")])),_:1})]),a[4]||(a[4]=h(`<h3 id="what-it-does" tabindex="-1">What it does <a class="header-anchor" href="#what-it-does" aria-label="Permalink to &quot;What it does&quot;">â€‹</a></h3><p>This rule finds ternary expressions that can be simplified to a logical operator.</p><h3 id="why-is-this-bad" tabindex="-1">Why is this bad? <a class="header-anchor" href="#why-is-this-bad" aria-label="Permalink to &quot;Why is this bad?&quot;">â€‹</a></h3><p>Using a logical operator is shorter and simpler than a ternary expression.</p><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">â€‹</a></h3><p>Examples of <strong>incorrect</strong> code for this rule:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> baz;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bar);</span></span></code></pre></div><p>Examples of <strong>correct</strong> code for this rule: const foo = bar || baz; console.log(foo ?? bar);</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>## References</span></span>
<span class="line"><span>- [Rule Source](https://github.com/oxc-project/oxc/blob/main/crates/oxc_linter/src/rules/unicorn/prefer_logical_operator_over_ternary.rs)</span></span></code></pre></div>`,9))])}const _=o(c,[["render",u]]);export{x as __pageData,_ as default};

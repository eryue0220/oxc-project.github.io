import{_ as o,c as l,j as s,a,I as e,w as r,a4 as h,E as t,o as c}from"./chunks/framework.D6UG3LSr.js";const A=JSON.parse('{"title":"eslint/no-new-native-nonconstructor","description":"","frontmatter":{},"headers":[],"relativePath":"docs/guide/usage/linter/rules/eslint/no-new-native-nonconstructor.md","filePath":"docs/guide/usage/linter/rules/eslint/no-new-native-nonconstructor.md"}'),p={name:"docs/guide/usage/linter/rules/eslint/no-new-native-nonconstructor.md"},d={id:"eslint-no-new-native-nonconstructor",tabindex:"-1"},k=s("a",{class:"header-anchor",href:"#eslint-no-new-native-nonconstructor","aria-label":'Permalink to "eslint/no-new-native-nonconstructor <Badge type="info" text="Correctness" />"'},"​",-1),u={class:"rule-meta"},g=s("span",{class:"emoji"},"✅",-1),_=h(`<h3 id="what-it-does" tabindex="-1">What it does <a class="header-anchor" href="#what-it-does" aria-label="Permalink to &quot;What it does&quot;">​</a></h3><p>Disallow new operators with global non-constructor functions (Symbol, BigInt)</p><h3 id="why-is-this-bad" tabindex="-1">Why is this bad? <a class="header-anchor" href="#why-is-this-bad" aria-label="Permalink to &quot;Why is this bad?&quot;">​</a></h3><p>Both new Symbol and new BigInt throw a type error because they are functions and not classes. It is easy to make this mistake by assuming the uppercase letters indicate classes.</p><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// throws a TypeError</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// throws a TypeError</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BigInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9007199254740991</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div>`,6);function y(E,m,w,b,f,v){const i=t("Badge"),n=t("Alert");return c(),l("div",null,[s("h1",d,[a("eslint/no-new-native-nonconstructor "),e(i,{type:"info",text:"Correctness"}),a(),k]),s("div",u,[e(n,{class:"default-on",type:"success"},{default:r(()=>[g,a(" This rule is turned on by default. ")]),_:1})]),_])}const F=o(p,[["render",y]]);export{A as __pageData,F as default};

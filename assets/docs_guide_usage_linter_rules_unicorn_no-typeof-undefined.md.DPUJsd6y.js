import{_ as s,c as n,j as a,a as e,I as t,a4 as o,o as d,E as l}from"./chunks/framework.D6UG3LSr.js";const E=JSON.parse('{"title":"unicorn/no-typeof-undefined","description":"","frontmatter":{},"headers":[],"relativePath":"docs/guide/usage/linter/rules/unicorn/no-typeof-undefined.md","filePath":"docs/guide/usage/linter/rules/unicorn/no-typeof-undefined.md"}'),h={name:"docs/guide/usage/linter/rules/unicorn/no-typeof-undefined.md"},c={id:"unicorn-no-typeof-undefined",tabindex:"-1"},p=a("a",{class:"header-anchor",href:"#unicorn-no-typeof-undefined","aria-label":'Permalink to "unicorn/no-typeof-undefined <Badge type="info" text="Pedantic" />"'},"​",-1),r=o(`<div class="rule-meta"></div><h3 id="what-it-does" tabindex="-1">What it does <a class="header-anchor" href="#what-it-does" aria-label="Permalink to &quot;What it does&quot;">​</a></h3><p>Disallow <code>typeof</code> comparisons with <code>undefined</code>.</p><h3 id="why-is-this-bad" tabindex="-1">Why is this bad? <a class="header-anchor" href="#why-is-this-bad" aria-label="Permalink to &quot;Why is this bad?&quot;">​</a></h3><p>Checking if a value is <code>undefined</code> by using <code>typeof value === &#39;undefined&#39;</code> is needlessly verbose. It&#39;s generally better to compare against <code>undefined</code> directly. The only time <code>typeof</code> is needed is when a global variable potentially does not exists, in which case, using <code>globalThis.value === undefined</code> may be better.</p><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// bad</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;undefined&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// good</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div>`,7);function u(f,k,y,g,_,b){const i=l("Badge");return d(),n("div",null,[a("h1",c,[e("unicorn/no-typeof-undefined "),t(i,{type:"info",text:"Pedantic"}),e(),p]),r])}const v=s(h,[["render",u]]);export{E as __pageData,v as default};

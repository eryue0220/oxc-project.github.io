import{_ as i,c as t,j as a,a as e,I as n,a4 as l,o as r,E as p}from"./chunks/framework.D6UG3LSr.js";const b=JSON.parse('{"title":"unicorn/prefer-reflect-apply","description":"","frontmatter":{},"headers":[],"relativePath":"docs/guide/usage/linter/rules/unicorn/prefer-reflect-apply.md","filePath":"docs/guide/usage/linter/rules/unicorn/prefer-reflect-apply.md"}'),h={name:"docs/guide/usage/linter/rules/unicorn/prefer-reflect-apply.md"},o={id:"unicorn-prefer-reflect-apply",tabindex:"-1"},d=a("a",{class:"header-anchor",href:"#unicorn-prefer-reflect-apply","aria-label":'Permalink to "unicorn/prefer-reflect-apply <Badge type="info" text="Style" />"'},"​",-1),c=l(`<div class="rule-meta"></div><h3 id="what-it-does" tabindex="-1">What it does <a class="header-anchor" href="#what-it-does" aria-label="Permalink to &quot;What it does&quot;">​</a></h3><h3 id="why-is-this-bad" tabindex="-1">Why is this bad? <a class="header-anchor" href="#why-is-this-bad" aria-label="Permalink to &quot;Why is this bad?&quot;">​</a></h3><p>Reflect.apply() is arguably less verbose and easier to understand. In addition, when you accept arbitrary methods, it&#39;s not safe to assume .apply() exists or is not overridden.</p><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Bad</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">foo.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Good</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(foo, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div>`,6);function k(u,y,f,E,g,_){const s=p("Badge");return r(),t("div",null,[a("h1",o,[e("unicorn/prefer-reflect-apply "),n(s,{type:"info",text:"Style"}),e(),d]),c])}const x=i(h,[["render",k]]);export{b as __pageData,x as default};

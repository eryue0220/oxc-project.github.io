import{_ as t,c as s,j as r,a as o,G as l,a2 as n,B as c,o as i}from"./chunks/framework.DlAqvapY.js";const g=JSON.parse('{"title":"Parser","description":"","frontmatter":{"title":"Parser","outline":"deep","badges":[{"src":"https://img.shields.io/crates/d/oxc_parser","alt":"total downloads from crates.io"}]},"headers":[],"relativePath":"docs/guide/usage/parser.md","filePath":"docs/guide/usage/parser.md"}'),d={name:"docs/guide/usage/parser.md"};function p(h,e,u,m,x,f){const a=c("AppBadgeList");return i(),s("div",null,[e[0]||(e[0]=r("h1",{id:"parser",tabindex:"-1"},[o("Parser "),r("a",{class:"header-anchor",href:"#parser","aria-label":'Permalink to "Parser"'},"​")],-1)),l(a),e[1]||(e[1]=n('<p>The Rust crate <code>oxc_parser</code> is production ready.</p><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features&quot;">​</a></h2><ul><li>3x faster than swc parser (<a href="https://github.com/oxc-project/bench-javascript-parser-written-in-rust" target="_blank" rel="noreferrer">benchmark</a>).</li><li>Parses <code>.js(x)</code> and <code>.ts(x)</code>.</li><li>Passes all parser tests from Test262 and 99% from Babel and TypeScript.</li><li>Utility for extracting ESM import and export data - a better <a href="https://github.com/guybedford/es-module-lexer" target="_blank" rel="noreferrer"><code>es-module-lexer</code></a>.</li><li><a href="https://x.com/robpalmer2/status/1805502964435505559" target="_blank" rel="noreferrer">✅ works with checker.ts</a></li></ul><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">​</a></h2><h3 id="rust" tabindex="-1">Rust <a class="header-anchor" href="#rust" aria-label="Permalink to &quot;Rust&quot;">​</a></h3><p>Use the umbrella crate <a href="https://docs.rs/oxc" target="_blank" rel="noreferrer">oxc</a> or the individual <a href="https://docs.rs/oxc_ast" target="_blank" rel="noreferrer">oxc_ast</a> and <a href="https://docs.rs/oxc_parser" target="_blank" rel="noreferrer">oxc_parser</a> crates.</p><p>Rust usage example can be found <a href="https://github.com/oxc-project/oxc/blob/main/crates/oxc_parser/examples/parser.rs" target="_blank" rel="noreferrer">here</a>.</p><h3 id="node-js-napi" tabindex="-1">Node.js (NAPI) <a class="header-anchor" href="#node-js-napi" aria-label="Permalink to &quot;Node.js (NAPI)&quot;">​</a></h3><p>Use the experimental node binding <a href="https://www.npmjs.com/package/oxc-parser" target="_blank" rel="noreferrer">oxc-parser</a>.</p><h3 id="esm-module-lexer" tabindex="-1">ESM Module Lexer <a class="header-anchor" href="#esm-module-lexer" aria-label="Permalink to &quot;ESM Module Lexer&quot;">​</a></h3><ul><li>Use the npm package <code>oxc-parser</code> with the API <code>moduleLexerSync</code>.</li><li>Use the crate <a href="https://crates.io/crates/oxc_module_lexer" target="_blank" rel="noreferrer">oxc_module_lexer</a>.</li></ul>',11))])}const _=t(d,[["render",p]]);export{g as __pageData,_ as default};

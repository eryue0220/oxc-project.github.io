import{_ as p,c as n,j as a,a as t,G as s,w as d,a2 as l,B as r,o as c}from"./chunks/framework.Cm5JpC29.js";const _=JSON.parse('{"title":"typescript/prefer-namespace-keyword","description":"","frontmatter":{},"headers":[],"relativePath":"docs/guide/usage/linter/rules/typescript/prefer-namespace-keyword.md","filePath":"docs/guide/usage/linter/rules/typescript/prefer-namespace-keyword.md"}'),h={name:"docs/guide/usage/linter/rules/typescript/prefer-namespace-keyword.md"},m={id:"typescript-prefer-namespace-keyword",tabindex:"-1"},u={class:"rule-meta"};function f(y,e,k,b,x,g){const o=r("Badge"),i=r("Alert");return c(),n("div",null,[a("h1",m,[e[0]||(e[0]=t("typescript/prefer-namespace-keyword ")),s(o,{type:"info",text:"Style"}),e[1]||(e[1]=t()),e[2]||(e[2]=a("a",{class:"header-anchor",href:"#typescript-prefer-namespace-keyword","aria-label":'Permalink to "typescript/prefer-namespace-keyword <Badge type="info" text="Style" />"'},"‚Äã",-1))]),a("div",u,[s(i,{class:"fix",type:"info"},{default:d(()=>e[3]||(e[3]=[a("span",{class:"emoji"},"üõ†Ô∏è",-1),t(" An auto-fix is available for this rule. ")])),_:1})]),e[4]||(e[4]=l('<h3 id="what-it-does" tabindex="-1">What it does <a class="header-anchor" href="#what-it-does" aria-label="Permalink to &quot;What it does&quot;">‚Äã</a></h3><p>This rule reports when the module keyword is used instead of namespace. This rule does not report on the use of TypeScript module declarations to describe external APIs (declare module &#39;foo&#39; {}).</p><h3 id="why-is-this-bad" tabindex="-1">Why is this bad? <a class="header-anchor" href="#why-is-this-bad" aria-label="Permalink to &quot;Why is this bad?&quot;">‚Äã</a></h3><p>Namespaces are an outdated way to organize TypeScript code. ES2015 module syntax is now preferred (import/export). For projects still using custom modules / namespaces, it&#39;s preferred to refer to them as namespaces.</p><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">‚Äã</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">module</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Example</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span></code></pre></div><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to &quot;References&quot;">‚Äã</a></h2><ul><li><a href="https://github.com/oxc-project/oxc/blob/45ef3eb2becc663e756a3da557df5a03fb40fd84/crates/oxc_linter/src/rules/typescript/prefer_namespace_keyword.rs" target="_blank" rel="noreferrer">Rule Source</a></li></ul>',8))])}const v=p(h,[["render",f]]);export{_ as __pageData,v as default};

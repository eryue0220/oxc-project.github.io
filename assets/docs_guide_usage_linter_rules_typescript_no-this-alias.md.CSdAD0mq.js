import{_ as n,c as r,j as e,a as t,I as s,w as d,a4 as c,E as a,o as l}from"./chunks/framework.D6UG3LSr.js";const C=JSON.parse('{"title":"typescript/no-this-alias","description":"","frontmatter":{},"headers":[],"relativePath":"docs/guide/usage/linter/rules/typescript/no-this-alias.md","filePath":"docs/guide/usage/linter/rules/typescript/no-this-alias.md"}'),p={name:"docs/guide/usage/linter/rules/typescript/no-this-alias.md"},h={id:"typescript-no-this-alias",tabindex:"-1"},u=e("a",{class:"header-anchor",href:"#typescript-no-this-alias","aria-label":'Permalink to "typescript/no-this-alias <Badge type="info" text="Correctness" />"'},"​",-1),_={class:"rule-meta"},m=e("span",{class:"emoji"},"✅",-1),y=c('<h3 id="what-it-does" tabindex="-1">What it does <a class="header-anchor" href="#what-it-does" aria-label="Permalink to &quot;What it does&quot;">​</a></h3><p>Disallow unnecessary constraints on generic types.</p><h3 id="why-is-this-bad" tabindex="-1">Why is this bad? <a class="header-anchor" href="#why-is-this-bad" aria-label="Permalink to &quot;Why is this bad?&quot;">​</a></h3><p>Generic type parameters (<code>&lt;T&gt;</code>) in TypeScript may be &quot;constrained&quot; with an extends keyword. When no extends is provided, type parameters default a constraint to unknown. It is therefore redundant to extend from any or unknown.</p><p>the rule doesn&#39;t allow <code>const {allowedName} = this</code> this is to keep 1:1 with eslint implementation sampe with <code>obj.&lt;allowedName&gt; = this</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span></code></pre></div>',6);function f(g,b,w,x,k,T){const i=a("Badge"),o=a("Alert");return l(),r("div",null,[e("h1",h,[t("typescript/no-this-alias "),s(i,{type:"info",text:"Correctness"}),t(),u]),e("div",_,[s(o,{class:"default-on",type:"success"},{default:d(()=>[m,t(" This rule is turned on by default. ")]),_:1})]),y])}const N=n(p,[["render",f]]);export{C as __pageData,N as default};
